##############################################################################
#  Copyright Christopher Kormanyos 2020 - 2024.
#  Distributed under the Boost Software License,
#  Version 1.0. (See accompanying file LICENSE_1_0.txt
#  or copy at http://www.boost.org/LICENSE_1_0.txt)

name: qemu_arm_sample
on:
  push:
    branches:
      - '**'
  pull_request:
jobs:
  benchmark_single-stm32f429-qemu:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - name: update-tools
        run: |
          sudo apt update
          wget http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_amd64.deb
          sudo apt install ./libtinfo5_6.3-2ubuntu0.1_amd64.deb
          wget http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libncursesw5_6.3-2ubuntu0.1_amd64.deb
          sudo apt install ./libncursesw5_6.3-2ubuntu0.1_amd64.deb
          mkdir -p emu_env && cd emu_env
          wget --no-check-certificate https://developer.arm.com/-/media/Files/downloads/gnu/13.3.rel1/binrel/arm-gnu-toolchain-13.3.rel1-x86_64-arm-none-eabi.tar.xz
          tar -xf arm-gnu-toolchain-13.3.rel1-x86_64-arm-none-eabi.tar.xz
          wget --no-check-certificate https://github.com/xpack-dev-tools/qemu-arm-xpack/releases/download/v8.2.6-1/xpack-qemu-arm-8.2.6-1-linux-x64.tar.gz
          tar -xzf xpack-qemu-arm-8.2.6-1-linux-x64.tar.gz
        working-directory: ./ref_app/
      - name: build benchmark_single-stm32f429
        run: |
          PATH="${{ runner.workspace }}/qemu_arm_sample/ref_app/emu_env/arm-gnu-toolchain-13.3.rel1-x86_64-arm-none-eabi/bin:$PATH"
          echo 'Query arm-none-eabi-g++ version'
          echo
          arm-none-eabi-g++ -v
          echo
          mkdir -p bin
          arm-none-eabi-g++ -std=c++20 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -O2 -g -gdwarf-2 -ffunction-sections -fdata-sections -x c++ -fno-rtti -fno-use-cxa-atexit -fno-exceptions -fno-nonansi-builtins -fno-threadsafe-statics -fno-enforce-eh-specs -ftemplate-depth=32 -mcpu=cortex-m4 -mtune=cortex-m4 -mthumb -mfloat-abi=soft -mno-unaligned-access -mno-long-calls -I./src/mcal/stm32f429 -I./src -DAPP_BENCHMARK_TYPE=APP_BENCHMARK_TYPE_CRC -DAPP_BENCHMARK_STANDALONE_MAIN ./src/app/benchmark/app_benchmark_crc.cpp ./target/micros/stm32f429/make/single/crt.cpp -nostartfiles -nostdlib -Wl,--gc-sections -Wl,-Map,./bin/app_benchmark_crc.map -T ./target/micros/stm32f429/make/stm32f429.ld --specs=nano.specs --specs=nosys.specs -o ./bin/app_benchmark_crc.elf
          arm-none-eabi-objcopy ./bin/app_benchmark_crc.elf -O ihex ./bin/app_benchmark_crc.hex
          ls -la ./bin/app_benchmark_crc.elf ./bin/app_benchmark_crc.hex ./bin/app_benchmark_crc.map
        working-directory: ./ref_app/
      - name: emulate-target stm32f429
        run: |
          PATH="${{ runner.workspace }}/qemu_arm_sample/ref_app/emu_env/xpack-qemu-arm-8.2.6-1/bin:$PATH"
          qemu-system-gnuarmeclipse --verbose --mcu STM32F429ZI --nographic --gdb tcp::9999 -d unimp,guest_errors &
          sleep 2
        working-directory: ./ref_app/
      - name: run-test-on-target
        run: |
          sleep 2
          PATH="${{ runner.workspace }}/qemu_arm_sample/ref_app/emu_env/arm-gnu-toolchain-13.3.rel1-x86_64-arm-none-eabi/bin:$PATH"
          echo 'Run test on target'
          echo
          arm-none-eabi-gdb ./bin/app_benchmark_crc.elf -x ./target/build/test_app_benchmarks_emulator.gdb > ./app_benchmark_crc.txt
          cat ./app_benchmark_crc.txt
          echo
          echo 'We will now grep for the right answer...'
          grep 'value 0xF00DCAFE' ./app_benchmark_crc.txt
        working-directory: ./ref_app/
  msvc-release-x64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.4
      - name: msvc-release-x64
        shell: cmd
        working-directory: ./ref_app/
        run: |
          MSBuild -m ref_app.sln -p:useenv=true -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir %cd%\x64\Release\ref_app.exe
          %cd%\x64\Release\ref_app.exe
